// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	computepb "cloud.google.com/go/compute/apiv1/computepb"

	mock "github.com/stretchr/testify/mock"
)

// MockComputeClientInterface is an autogenerated mock type for the ComputeClientInterface type
type MockComputeClientInterface struct {
	mock.Mock
}

type MockComputeClientInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockComputeClientInterface) EXPECT() *MockComputeClientInterface_Expecter {
	return &MockComputeClientInterface_Expecter{mock: &_m.Mock}
}

// AggregatedListInstances provides a mock function with given fields: ctx, projectID
func (_m *MockComputeClientInterface) AggregatedListInstances(ctx context.Context, projectID string) ([]*computepb.Instance, error) {
	ret := _m.Called(ctx, projectID)

	if len(ret) == 0 {
		panic("no return value specified for AggregatedListInstances")
	}

	var r0 []*computepb.Instance
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*computepb.Instance, error)); ok {
		return rf(ctx, projectID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []*computepb.Instance); ok {
		r0 = rf(ctx, projectID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*computepb.Instance)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, projectID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockComputeClientInterface_AggregatedListInstances_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AggregatedListInstances'
type MockComputeClientInterface_AggregatedListInstances_Call struct {
	*mock.Call
}

// AggregatedListInstances is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID string
func (_e *MockComputeClientInterface_Expecter) AggregatedListInstances(ctx interface{}, projectID interface{}) *MockComputeClientInterface_AggregatedListInstances_Call {
	return &MockComputeClientInterface_AggregatedListInstances_Call{Call: _e.mock.On("AggregatedListInstances", ctx, projectID)}
}

func (_c *MockComputeClientInterface_AggregatedListInstances_Call) Run(run func(ctx context.Context, projectID string)) *MockComputeClientInterface_AggregatedListInstances_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockComputeClientInterface_AggregatedListInstances_Call) Return(_a0 []*computepb.Instance, _a1 error) *MockComputeClientInterface_AggregatedListInstances_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockComputeClientInterface_AggregatedListInstances_Call) RunAndReturn(run func(context.Context, string) ([]*computepb.Instance, error)) *MockComputeClientInterface_AggregatedListInstances_Call {
	_c.Call.Return(run)
	return _c
}

// AttachDisk provides a mock function with given fields: ctx, projectID, zone, instanceName, diskName, deviceName
func (_m *MockComputeClientInterface) AttachDisk(ctx context.Context, projectID string, zone string, instanceName string, diskName string, deviceName string) error {
	ret := _m.Called(ctx, projectID, zone, instanceName, diskName, deviceName)

	if len(ret) == 0 {
		panic("no return value specified for AttachDisk")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string, string) error); ok {
		r0 = rf(ctx, projectID, zone, instanceName, diskName, deviceName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockComputeClientInterface_AttachDisk_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AttachDisk'
type MockComputeClientInterface_AttachDisk_Call struct {
	*mock.Call
}

// AttachDisk is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID string
//   - zone string
//   - instanceName string
//   - diskName string
//   - deviceName string
func (_e *MockComputeClientInterface_Expecter) AttachDisk(ctx interface{}, projectID interface{}, zone interface{}, instanceName interface{}, diskName interface{}, deviceName interface{}) *MockComputeClientInterface_AttachDisk_Call {
	return &MockComputeClientInterface_AttachDisk_Call{Call: _e.mock.On("AttachDisk", ctx, projectID, zone, instanceName, diskName, deviceName)}
}

func (_c *MockComputeClientInterface_AttachDisk_Call) Run(run func(ctx context.Context, projectID string, zone string, instanceName string, diskName string, deviceName string)) *MockComputeClientInterface_AttachDisk_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(string), args[5].(string))
	})
	return _c
}

func (_c *MockComputeClientInterface_AttachDisk_Call) Return(_a0 error) *MockComputeClientInterface_AttachDisk_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockComputeClientInterface_AttachDisk_Call) RunAndReturn(run func(context.Context, string, string, string, string, string) error) *MockComputeClientInterface_AttachDisk_Call {
	_c.Call.Return(run)
	return _c
}

// Close provides a mock function with no fields
func (_m *MockComputeClientInterface) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockComputeClientInterface_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockComputeClientInterface_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockComputeClientInterface_Expecter) Close() *MockComputeClientInterface_Close_Call {
	return &MockComputeClientInterface_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockComputeClientInterface_Close_Call) Run(run func()) *MockComputeClientInterface_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockComputeClientInterface_Close_Call) Return(_a0 error) *MockComputeClientInterface_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockComputeClientInterface_Close_Call) RunAndReturn(run func() error) *MockComputeClientInterface_Close_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteInstance provides a mock function with given fields: ctx, projectID, zone, instanceName
func (_m *MockComputeClientInterface) DeleteInstance(ctx context.Context, projectID string, zone string, instanceName string) error {
	ret := _m.Called(ctx, projectID, zone, instanceName)

	if len(ret) == 0 {
		panic("no return value specified for DeleteInstance")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = rf(ctx, projectID, zone, instanceName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockComputeClientInterface_DeleteInstance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteInstance'
type MockComputeClientInterface_DeleteInstance_Call struct {
	*mock.Call
}

// DeleteInstance is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID string
//   - zone string
//   - instanceName string
func (_e *MockComputeClientInterface_Expecter) DeleteInstance(ctx interface{}, projectID interface{}, zone interface{}, instanceName interface{}) *MockComputeClientInterface_DeleteInstance_Call {
	return &MockComputeClientInterface_DeleteInstance_Call{Call: _e.mock.On("DeleteInstance", ctx, projectID, zone, instanceName)}
}

func (_c *MockComputeClientInterface_DeleteInstance_Call) Run(run func(ctx context.Context, projectID string, zone string, instanceName string)) *MockComputeClientInterface_DeleteInstance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockComputeClientInterface_DeleteInstance_Call) Return(_a0 error) *MockComputeClientInterface_DeleteInstance_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockComputeClientInterface_DeleteInstance_Call) RunAndReturn(run func(context.Context, string, string, string) error) *MockComputeClientInterface_DeleteInstance_Call {
	_c.Call.Return(run)
	return _c
}

// DetachDisk provides a mock function with given fields: ctx, projectID, zone, instanceName, deviceName
func (_m *MockComputeClientInterface) DetachDisk(ctx context.Context, projectID string, zone string, instanceName string, deviceName string) error {
	ret := _m.Called(ctx, projectID, zone, instanceName, deviceName)

	if len(ret) == 0 {
		panic("no return value specified for DetachDisk")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string) error); ok {
		r0 = rf(ctx, projectID, zone, instanceName, deviceName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockComputeClientInterface_DetachDisk_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DetachDisk'
type MockComputeClientInterface_DetachDisk_Call struct {
	*mock.Call
}

// DetachDisk is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID string
//   - zone string
//   - instanceName string
//   - deviceName string
func (_e *MockComputeClientInterface_Expecter) DetachDisk(ctx interface{}, projectID interface{}, zone interface{}, instanceName interface{}, deviceName interface{}) *MockComputeClientInterface_DetachDisk_Call {
	return &MockComputeClientInterface_DetachDisk_Call{Call: _e.mock.On("DetachDisk", ctx, projectID, zone, instanceName, deviceName)}
}

func (_c *MockComputeClientInterface_DetachDisk_Call) Run(run func(ctx context.Context, projectID string, zone string, instanceName string, deviceName string)) *MockComputeClientInterface_DetachDisk_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(string))
	})
	return _c
}

func (_c *MockComputeClientInterface_DetachDisk_Call) Return(_a0 error) *MockComputeClientInterface_DetachDisk_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockComputeClientInterface_DetachDisk_Call) RunAndReturn(run func(context.Context, string, string, string, string) error) *MockComputeClientInterface_DetachDisk_Call {
	_c.Call.Return(run)
	return _c
}

// GetInstance provides a mock function with given fields: ctx, projectID, zone, instanceName
func (_m *MockComputeClientInterface) GetInstance(ctx context.Context, projectID string, zone string, instanceName string) (*computepb.Instance, error) {
	ret := _m.Called(ctx, projectID, zone, instanceName)

	if len(ret) == 0 {
		panic("no return value specified for GetInstance")
	}

	var r0 *computepb.Instance
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) (*computepb.Instance, error)); ok {
		return rf(ctx, projectID, zone, instanceName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) *computepb.Instance); ok {
		r0 = rf(ctx, projectID, zone, instanceName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*computepb.Instance)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, projectID, zone, instanceName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockComputeClientInterface_GetInstance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetInstance'
type MockComputeClientInterface_GetInstance_Call struct {
	*mock.Call
}

// GetInstance is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID string
//   - zone string
//   - instanceName string
func (_e *MockComputeClientInterface_Expecter) GetInstance(ctx interface{}, projectID interface{}, zone interface{}, instanceName interface{}) *MockComputeClientInterface_GetInstance_Call {
	return &MockComputeClientInterface_GetInstance_Call{Call: _e.mock.On("GetInstance", ctx, projectID, zone, instanceName)}
}

func (_c *MockComputeClientInterface_GetInstance_Call) Run(run func(ctx context.Context, projectID string, zone string, instanceName string)) *MockComputeClientInterface_GetInstance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockComputeClientInterface_GetInstance_Call) Return(_a0 *computepb.Instance, _a1 error) *MockComputeClientInterface_GetInstance_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockComputeClientInterface_GetInstance_Call) RunAndReturn(run func(context.Context, string, string, string) (*computepb.Instance, error)) *MockComputeClientInterface_GetInstance_Call {
	_c.Call.Return(run)
	return _c
}

// GetInstanceDisks provides a mock function with given fields: ctx, projectID, zone, instanceName
func (_m *MockComputeClientInterface) GetInstanceDisks(ctx context.Context, projectID string, zone string, instanceName string) ([]*computepb.AttachedDisk, error) {
	ret := _m.Called(ctx, projectID, zone, instanceName)

	if len(ret) == 0 {
		panic("no return value specified for GetInstanceDisks")
	}

	var r0 []*computepb.AttachedDisk
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) ([]*computepb.AttachedDisk, error)); ok {
		return rf(ctx, projectID, zone, instanceName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) []*computepb.AttachedDisk); ok {
		r0 = rf(ctx, projectID, zone, instanceName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*computepb.AttachedDisk)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, projectID, zone, instanceName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockComputeClientInterface_GetInstanceDisks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetInstanceDisks'
type MockComputeClientInterface_GetInstanceDisks_Call struct {
	*mock.Call
}

// GetInstanceDisks is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID string
//   - zone string
//   - instanceName string
func (_e *MockComputeClientInterface_Expecter) GetInstanceDisks(ctx interface{}, projectID interface{}, zone interface{}, instanceName interface{}) *MockComputeClientInterface_GetInstanceDisks_Call {
	return &MockComputeClientInterface_GetInstanceDisks_Call{Call: _e.mock.On("GetInstanceDisks", ctx, projectID, zone, instanceName)}
}

func (_c *MockComputeClientInterface_GetInstanceDisks_Call) Run(run func(ctx context.Context, projectID string, zone string, instanceName string)) *MockComputeClientInterface_GetInstanceDisks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockComputeClientInterface_GetInstanceDisks_Call) Return(_a0 []*computepb.AttachedDisk, _a1 error) *MockComputeClientInterface_GetInstanceDisks_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockComputeClientInterface_GetInstanceDisks_Call) RunAndReturn(run func(context.Context, string, string, string) ([]*computepb.AttachedDisk, error)) *MockComputeClientInterface_GetInstanceDisks_Call {
	_c.Call.Return(run)
	return _c
}

// InstanceIsRunning provides a mock function with given fields: ctx, instance
func (_m *MockComputeClientInterface) InstanceIsRunning(ctx context.Context, instance *computepb.Instance) bool {
	ret := _m.Called(ctx, instance)

	if len(ret) == 0 {
		panic("no return value specified for InstanceIsRunning")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, *computepb.Instance) bool); ok {
		r0 = rf(ctx, instance)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockComputeClientInterface_InstanceIsRunning_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InstanceIsRunning'
type MockComputeClientInterface_InstanceIsRunning_Call struct {
	*mock.Call
}

// InstanceIsRunning is a helper method to define mock.On call
//   - ctx context.Context
//   - instance *computepb.Instance
func (_e *MockComputeClientInterface_Expecter) InstanceIsRunning(ctx interface{}, instance interface{}) *MockComputeClientInterface_InstanceIsRunning_Call {
	return &MockComputeClientInterface_InstanceIsRunning_Call{Call: _e.mock.On("InstanceIsRunning", ctx, instance)}
}

func (_c *MockComputeClientInterface_InstanceIsRunning_Call) Run(run func(ctx context.Context, instance *computepb.Instance)) *MockComputeClientInterface_InstanceIsRunning_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*computepb.Instance))
	})
	return _c
}

func (_c *MockComputeClientInterface_InstanceIsRunning_Call) Return(_a0 bool) *MockComputeClientInterface_InstanceIsRunning_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockComputeClientInterface_InstanceIsRunning_Call) RunAndReturn(run func(context.Context, *computepb.Instance) bool) *MockComputeClientInterface_InstanceIsRunning_Call {
	_c.Call.Return(run)
	return _c
}

// ListInstancesInZone provides a mock function with given fields: ctx, projectID, zone
func (_m *MockComputeClientInterface) ListInstancesInZone(ctx context.Context, projectID string, zone string) ([]*computepb.Instance, error) {
	ret := _m.Called(ctx, projectID, zone)

	if len(ret) == 0 {
		panic("no return value specified for ListInstancesInZone")
	}

	var r0 []*computepb.Instance
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) ([]*computepb.Instance, error)); ok {
		return rf(ctx, projectID, zone)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) []*computepb.Instance); ok {
		r0 = rf(ctx, projectID, zone)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*computepb.Instance)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, projectID, zone)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockComputeClientInterface_ListInstancesInZone_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListInstancesInZone'
type MockComputeClientInterface_ListInstancesInZone_Call struct {
	*mock.Call
}

// ListInstancesInZone is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID string
//   - zone string
func (_e *MockComputeClientInterface_Expecter) ListInstancesInZone(ctx interface{}, projectID interface{}, zone interface{}) *MockComputeClientInterface_ListInstancesInZone_Call {
	return &MockComputeClientInterface_ListInstancesInZone_Call{Call: _e.mock.On("ListInstancesInZone", ctx, projectID, zone)}
}

func (_c *MockComputeClientInterface_ListInstancesInZone_Call) Run(run func(ctx context.Context, projectID string, zone string)) *MockComputeClientInterface_ListInstancesInZone_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockComputeClientInterface_ListInstancesInZone_Call) Return(_a0 []*computepb.Instance, _a1 error) *MockComputeClientInterface_ListInstancesInZone_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockComputeClientInterface_ListInstancesInZone_Call) RunAndReturn(run func(context.Context, string, string) ([]*computepb.Instance, error)) *MockComputeClientInterface_ListInstancesInZone_Call {
	_c.Call.Return(run)
	return _c
}

// StartInstance provides a mock function with given fields: ctx, projectID, zone, instanceName
func (_m *MockComputeClientInterface) StartInstance(ctx context.Context, projectID string, zone string, instanceName string) error {
	ret := _m.Called(ctx, projectID, zone, instanceName)

	if len(ret) == 0 {
		panic("no return value specified for StartInstance")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = rf(ctx, projectID, zone, instanceName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockComputeClientInterface_StartInstance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StartInstance'
type MockComputeClientInterface_StartInstance_Call struct {
	*mock.Call
}

// StartInstance is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID string
//   - zone string
//   - instanceName string
func (_e *MockComputeClientInterface_Expecter) StartInstance(ctx interface{}, projectID interface{}, zone interface{}, instanceName interface{}) *MockComputeClientInterface_StartInstance_Call {
	return &MockComputeClientInterface_StartInstance_Call{Call: _e.mock.On("StartInstance", ctx, projectID, zone, instanceName)}
}

func (_c *MockComputeClientInterface_StartInstance_Call) Run(run func(ctx context.Context, projectID string, zone string, instanceName string)) *MockComputeClientInterface_StartInstance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockComputeClientInterface_StartInstance_Call) Return(_a0 error) *MockComputeClientInterface_StartInstance_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockComputeClientInterface_StartInstance_Call) RunAndReturn(run func(context.Context, string, string, string) error) *MockComputeClientInterface_StartInstance_Call {
	_c.Call.Return(run)
	return _c
}

// StopInstance provides a mock function with given fields: ctx, projectID, zone, instanceName
func (_m *MockComputeClientInterface) StopInstance(ctx context.Context, projectID string, zone string, instanceName string) error {
	ret := _m.Called(ctx, projectID, zone, instanceName)

	if len(ret) == 0 {
		panic("no return value specified for StopInstance")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = rf(ctx, projectID, zone, instanceName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockComputeClientInterface_StopInstance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StopInstance'
type MockComputeClientInterface_StopInstance_Call struct {
	*mock.Call
}

// StopInstance is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID string
//   - zone string
//   - instanceName string
func (_e *MockComputeClientInterface_Expecter) StopInstance(ctx interface{}, projectID interface{}, zone interface{}, instanceName interface{}) *MockComputeClientInterface_StopInstance_Call {
	return &MockComputeClientInterface_StopInstance_Call{Call: _e.mock.On("StopInstance", ctx, projectID, zone, instanceName)}
}

func (_c *MockComputeClientInterface_StopInstance_Call) Run(run func(ctx context.Context, projectID string, zone string, instanceName string)) *MockComputeClientInterface_StopInstance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockComputeClientInterface_StopInstance_Call) Return(_a0 error) *MockComputeClientInterface_StopInstance_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockComputeClientInterface_StopInstance_Call) RunAndReturn(run func(context.Context, string, string, string) error) *MockComputeClientInterface_StopInstance_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockComputeClientInterface creates a new instance of MockComputeClientInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockComputeClientInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockComputeClientInterface {
	mock := &MockComputeClientInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
