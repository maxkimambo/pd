// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	computepb "cloud.google.com/go/compute/apiv1/computepb"


	mock "github.com/stretchr/testify/mock"
)

// SnapshotKmsParams defines KMS parameters for snapshot encryption
type SnapshotKmsParams struct {
	KmsKey      string
	KmsKeyRing  string
	KmsLocation string
	KmsProject  string
}

// MockSnapshotClientInterface is an autogenerated mock type for the SnapshotClientInterface type
type MockSnapshotClientInterface struct {
	mock.Mock
}

type MockSnapshotClientInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSnapshotClientInterface) EXPECT() *MockSnapshotClientInterface_Expecter {
	return &MockSnapshotClientInterface_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with no fields
func (_m *MockSnapshotClientInterface) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSnapshotClientInterface_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockSnapshotClientInterface_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockSnapshotClientInterface_Expecter) Close() *MockSnapshotClientInterface_Close_Call {
	return &MockSnapshotClientInterface_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockSnapshotClientInterface_Close_Call) Run(run func()) *MockSnapshotClientInterface_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSnapshotClientInterface_Close_Call) Return(_a0 error) *MockSnapshotClientInterface_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSnapshotClientInterface_Close_Call) RunAndReturn(run func() error) *MockSnapshotClientInterface_Close_Call {
	_c.Call.Return(run)
	return _c
}

// CreateSnapshot provides a mock function with given fields: ctx, projectID, zone, diskName, snapshotName, kmsParams, labels
func (_m *MockSnapshotClientInterface) CreateSnapshot(ctx context.Context, projectID string, zone string, diskName string, snapshotName string, kmsParams *SnapshotKmsParams, labels map[string]string) error {
	ret := _m.Called(ctx, projectID, zone, diskName, snapshotName, kmsParams, labels)

	if len(ret) == 0 {
		panic("no return value specified for CreateSnapshot")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string, *SnapshotKmsParams, map[string]string) error); ok {
		r0 = rf(ctx, projectID, zone, diskName, snapshotName, kmsParams, labels)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSnapshotClientInterface_CreateSnapshot_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateSnapshot'
type MockSnapshotClientInterface_CreateSnapshot_Call struct {
	*mock.Call
}

// CreateSnapshot is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID string
//   - zone string
//   - diskName string
//   - snapshotName string
//   - kmsParams *SnapshotKmsParams
//   - labels map[string]string
func (_e *MockSnapshotClientInterface_Expecter) CreateSnapshot(ctx interface{}, projectID interface{}, zone interface{}, diskName interface{}, snapshotName interface{}, kmsParams interface{}, labels interface{}) *MockSnapshotClientInterface_CreateSnapshot_Call {
	return &MockSnapshotClientInterface_CreateSnapshot_Call{Call: _e.mock.On("CreateSnapshot", ctx, projectID, zone, diskName, snapshotName, kmsParams, labels)}
}

func (_c *MockSnapshotClientInterface_CreateSnapshot_Call) Run(run func(ctx context.Context, projectID string, zone string, diskName string, snapshotName string, kmsParams *SnapshotKmsParams, labels map[string]string)) *MockSnapshotClientInterface_CreateSnapshot_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(string), args[5].(*SnapshotKmsParams), args[6].(map[string]string))
	})
	return _c
}

func (_c *MockSnapshotClientInterface_CreateSnapshot_Call) Return(_a0 error) *MockSnapshotClientInterface_CreateSnapshot_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSnapshotClientInterface_CreateSnapshot_Call) RunAndReturn(run func(context.Context, string, string, string, string, *SnapshotKmsParams, map[string]string) error) *MockSnapshotClientInterface_CreateSnapshot_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteSnapshot provides a mock function with given fields: ctx, projectID, snapshotName
func (_m *MockSnapshotClientInterface) DeleteSnapshot(ctx context.Context, projectID string, snapshotName string) error {
	ret := _m.Called(ctx, projectID, snapshotName)

	if len(ret) == 0 {
		panic("no return value specified for DeleteSnapshot")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, projectID, snapshotName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSnapshotClientInterface_DeleteSnapshot_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteSnapshot'
type MockSnapshotClientInterface_DeleteSnapshot_Call struct {
	*mock.Call
}

// DeleteSnapshot is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID string
//   - snapshotName string
func (_e *MockSnapshotClientInterface_Expecter) DeleteSnapshot(ctx interface{}, projectID interface{}, snapshotName interface{}) *MockSnapshotClientInterface_DeleteSnapshot_Call {
	return &MockSnapshotClientInterface_DeleteSnapshot_Call{Call: _e.mock.On("DeleteSnapshot", ctx, projectID, snapshotName)}
}

func (_c *MockSnapshotClientInterface_DeleteSnapshot_Call) Run(run func(ctx context.Context, projectID string, snapshotName string)) *MockSnapshotClientInterface_DeleteSnapshot_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockSnapshotClientInterface_DeleteSnapshot_Call) Return(_a0 error) *MockSnapshotClientInterface_DeleteSnapshot_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSnapshotClientInterface_DeleteSnapshot_Call) RunAndReturn(run func(context.Context, string, string) error) *MockSnapshotClientInterface_DeleteSnapshot_Call {
	_c.Call.Return(run)
	return _c
}

// GetSnapshot provides a mock function with given fields: ctx, projectID, snapshotName
func (_m *MockSnapshotClientInterface) GetSnapshot(ctx context.Context, projectID string, snapshotName string) (*computepb.Snapshot, error) {
	ret := _m.Called(ctx, projectID, snapshotName)

	if len(ret) == 0 {
		panic("no return value specified for GetSnapshot")
	}

	var r0 *computepb.Snapshot
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*computepb.Snapshot, error)); ok {
		return rf(ctx, projectID, snapshotName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *computepb.Snapshot); ok {
		r0 = rf(ctx, projectID, snapshotName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*computepb.Snapshot)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, projectID, snapshotName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSnapshotClientInterface_GetSnapshot_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSnapshot'
type MockSnapshotClientInterface_GetSnapshot_Call struct {
	*mock.Call
}

// GetSnapshot is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID string
//   - snapshotName string
func (_e *MockSnapshotClientInterface_Expecter) GetSnapshot(ctx interface{}, projectID interface{}, snapshotName interface{}) *MockSnapshotClientInterface_GetSnapshot_Call {
	return &MockSnapshotClientInterface_GetSnapshot_Call{Call: _e.mock.On("GetSnapshot", ctx, projectID, snapshotName)}
}

func (_c *MockSnapshotClientInterface_GetSnapshot_Call) Run(run func(ctx context.Context, projectID string, snapshotName string)) *MockSnapshotClientInterface_GetSnapshot_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockSnapshotClientInterface_GetSnapshot_Call) Return(_a0 *computepb.Snapshot, _a1 error) *MockSnapshotClientInterface_GetSnapshot_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSnapshotClientInterface_GetSnapshot_Call) RunAndReturn(run func(context.Context, string, string) (*computepb.Snapshot, error)) *MockSnapshotClientInterface_GetSnapshot_Call {
	_c.Call.Return(run)
	return _c
}

// ListSnapshotsByLabel provides a mock function with given fields: ctx, projectID, labelKey, labelValue
func (_m *MockSnapshotClientInterface) ListSnapshotsByLabel(ctx context.Context, projectID string, labelKey string, labelValue string) ([]*computepb.Snapshot, error) {
	ret := _m.Called(ctx, projectID, labelKey, labelValue)

	if len(ret) == 0 {
		panic("no return value specified for ListSnapshotsByLabel")
	}

	var r0 []*computepb.Snapshot
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) ([]*computepb.Snapshot, error)); ok {
		return rf(ctx, projectID, labelKey, labelValue)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) []*computepb.Snapshot); ok {
		r0 = rf(ctx, projectID, labelKey, labelValue)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*computepb.Snapshot)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, projectID, labelKey, labelValue)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSnapshotClientInterface_ListSnapshotsByLabel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListSnapshotsByLabel'
type MockSnapshotClientInterface_ListSnapshotsByLabel_Call struct {
	*mock.Call
}

// ListSnapshotsByLabel is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID string
//   - labelKey string
//   - labelValue string
func (_e *MockSnapshotClientInterface_Expecter) ListSnapshotsByLabel(ctx interface{}, projectID interface{}, labelKey interface{}, labelValue interface{}) *MockSnapshotClientInterface_ListSnapshotsByLabel_Call {
	return &MockSnapshotClientInterface_ListSnapshotsByLabel_Call{Call: _e.mock.On("ListSnapshotsByLabel", ctx, projectID, labelKey, labelValue)}
}

func (_c *MockSnapshotClientInterface_ListSnapshotsByLabel_Call) Run(run func(ctx context.Context, projectID string, labelKey string, labelValue string)) *MockSnapshotClientInterface_ListSnapshotsByLabel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockSnapshotClientInterface_ListSnapshotsByLabel_Call) Return(_a0 []*computepb.Snapshot, _a1 error) *MockSnapshotClientInterface_ListSnapshotsByLabel_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSnapshotClientInterface_ListSnapshotsByLabel_Call) RunAndReturn(run func(context.Context, string, string, string) ([]*computepb.Snapshot, error)) *MockSnapshotClientInterface_ListSnapshotsByLabel_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSnapshotClientInterface creates a new instance of MockSnapshotClientInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSnapshotClientInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSnapshotClientInterface {
	mock := &MockSnapshotClientInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
