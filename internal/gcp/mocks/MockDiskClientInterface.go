// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	computepb "cloud.google.com/go/compute/apiv1/computepb"

	mock "github.com/stretchr/testify/mock"
)

// MockDiskClientInterface is an autogenerated mock type for the DiskClientInterface type
type MockDiskClientInterface struct {
	mock.Mock
}

type MockDiskClientInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDiskClientInterface) EXPECT() *MockDiskClientInterface_Expecter {
	return &MockDiskClientInterface_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with no fields
func (_m *MockDiskClientInterface) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDiskClientInterface_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockDiskClientInterface_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockDiskClientInterface_Expecter) Close() *MockDiskClientInterface_Close_Call {
	return &MockDiskClientInterface_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockDiskClientInterface_Close_Call) Run(run func()) *MockDiskClientInterface_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDiskClientInterface_Close_Call) Return(_a0 error) *MockDiskClientInterface_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDiskClientInterface_Close_Call) RunAndReturn(run func() error) *MockDiskClientInterface_Close_Call {
	_c.Call.Return(run)
	return _c
}

// CreateNewDiskFromSnapshot provides a mock function with given fields: ctx, projectID, zone, newDiskName, targetDiskType, snapshotSource, labels, size, iops, throughput, storagePoolID
func (_m *MockDiskClientInterface) CreateNewDiskFromSnapshot(ctx context.Context, projectID string, zone string, newDiskName string, targetDiskType string, snapshotSource string, labels map[string]string, size int64, iops int64, throughput int64, storagePoolID string) error {
	ret := _m.Called(ctx, projectID, zone, newDiskName, targetDiskType, snapshotSource, labels, size, iops, throughput, storagePoolID)

	if len(ret) == 0 {
		panic("no return value specified for CreateNewDiskFromSnapshot")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string, string, map[string]string, int64, int64, int64, string) error); ok {
		r0 = rf(ctx, projectID, zone, newDiskName, targetDiskType, snapshotSource, labels, size, iops, throughput, storagePoolID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDiskClientInterface_CreateNewDiskFromSnapshot_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateNewDiskFromSnapshot'
type MockDiskClientInterface_CreateNewDiskFromSnapshot_Call struct {
	*mock.Call
}

// CreateNewDiskFromSnapshot is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID string
//   - zone string
//   - newDiskName string
//   - targetDiskType string
//   - snapshotSource string
//   - labels map[string]string
//   - size int64
//   - iops int64
//   - throughput int64
//   - storagePoolID string
func (_e *MockDiskClientInterface_Expecter) CreateNewDiskFromSnapshot(ctx interface{}, projectID interface{}, zone interface{}, newDiskName interface{}, targetDiskType interface{}, snapshotSource interface{}, labels interface{}, size interface{}, iops interface{}, throughput interface{}, storagePoolID interface{}) *MockDiskClientInterface_CreateNewDiskFromSnapshot_Call {
	return &MockDiskClientInterface_CreateNewDiskFromSnapshot_Call{Call: _e.mock.On("CreateNewDiskFromSnapshot", ctx, projectID, zone, newDiskName, targetDiskType, snapshotSource, labels, size, iops, throughput, storagePoolID)}
}

func (_c *MockDiskClientInterface_CreateNewDiskFromSnapshot_Call) Run(run func(ctx context.Context, projectID string, zone string, newDiskName string, targetDiskType string, snapshotSource string, labels map[string]string, size int64, iops int64, throughput int64, storagePoolID string)) *MockDiskClientInterface_CreateNewDiskFromSnapshot_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(string), args[5].(string), args[6].(map[string]string), args[7].(int64), args[8].(int64), args[9].(int64), args[10].(string))
	})
	return _c
}

func (_c *MockDiskClientInterface_CreateNewDiskFromSnapshot_Call) Return(_a0 error) *MockDiskClientInterface_CreateNewDiskFromSnapshot_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDiskClientInterface_CreateNewDiskFromSnapshot_Call) RunAndReturn(run func(context.Context, string, string, string, string, string, map[string]string, int64, int64, int64, string) error) *MockDiskClientInterface_CreateNewDiskFromSnapshot_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteDisk provides a mock function with given fields: ctx, projectID, zone, diskName
func (_m *MockDiskClientInterface) DeleteDisk(ctx context.Context, projectID string, zone string, diskName string) error {
	ret := _m.Called(ctx, projectID, zone, diskName)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDisk")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = rf(ctx, projectID, zone, diskName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDiskClientInterface_DeleteDisk_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteDisk'
type MockDiskClientInterface_DeleteDisk_Call struct {
	*mock.Call
}

// DeleteDisk is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID string
//   - zone string
//   - diskName string
func (_e *MockDiskClientInterface_Expecter) DeleteDisk(ctx interface{}, projectID interface{}, zone interface{}, diskName interface{}) *MockDiskClientInterface_DeleteDisk_Call {
	return &MockDiskClientInterface_DeleteDisk_Call{Call: _e.mock.On("DeleteDisk", ctx, projectID, zone, diskName)}
}

func (_c *MockDiskClientInterface_DeleteDisk_Call) Run(run func(ctx context.Context, projectID string, zone string, diskName string)) *MockDiskClientInterface_DeleteDisk_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockDiskClientInterface_DeleteDisk_Call) Return(_a0 error) *MockDiskClientInterface_DeleteDisk_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDiskClientInterface_DeleteDisk_Call) RunAndReturn(run func(context.Context, string, string, string) error) *MockDiskClientInterface_DeleteDisk_Call {
	_c.Call.Return(run)
	return _c
}

// GetDisk provides a mock function with given fields: ctx, projectID, zone, diskName
func (_m *MockDiskClientInterface) GetDisk(ctx context.Context, projectID string, zone string, diskName string) (*computepb.Disk, error) {
	ret := _m.Called(ctx, projectID, zone, diskName)

	if len(ret) == 0 {
		panic("no return value specified for GetDisk")
	}

	var r0 *computepb.Disk
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) (*computepb.Disk, error)); ok {
		return rf(ctx, projectID, zone, diskName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) *computepb.Disk); ok {
		r0 = rf(ctx, projectID, zone, diskName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*computepb.Disk)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, projectID, zone, diskName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDiskClientInterface_GetDisk_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDisk'
type MockDiskClientInterface_GetDisk_Call struct {
	*mock.Call
}

// GetDisk is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID string
//   - zone string
//   - diskName string
func (_e *MockDiskClientInterface_Expecter) GetDisk(ctx interface{}, projectID interface{}, zone interface{}, diskName interface{}) *MockDiskClientInterface_GetDisk_Call {
	return &MockDiskClientInterface_GetDisk_Call{Call: _e.mock.On("GetDisk", ctx, projectID, zone, diskName)}
}

func (_c *MockDiskClientInterface_GetDisk_Call) Run(run func(ctx context.Context, projectID string, zone string, diskName string)) *MockDiskClientInterface_GetDisk_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockDiskClientInterface_GetDisk_Call) Return(_a0 *computepb.Disk, _a1 error) *MockDiskClientInterface_GetDisk_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDiskClientInterface_GetDisk_Call) RunAndReturn(run func(context.Context, string, string, string) (*computepb.Disk, error)) *MockDiskClientInterface_GetDisk_Call {
	_c.Call.Return(run)
	return _c
}

// ListDetachedDisks provides a mock function with given fields: ctx, projectID, location, labelFilter
func (_m *MockDiskClientInterface) ListDetachedDisks(ctx context.Context, projectID string, location string, labelFilter string) ([]*computepb.Disk, error) {
	ret := _m.Called(ctx, projectID, location, labelFilter)

	if len(ret) == 0 {
		panic("no return value specified for ListDetachedDisks")
	}

	var r0 []*computepb.Disk
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) ([]*computepb.Disk, error)); ok {
		return rf(ctx, projectID, location, labelFilter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) []*computepb.Disk); ok {
		r0 = rf(ctx, projectID, location, labelFilter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*computepb.Disk)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, projectID, location, labelFilter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDiskClientInterface_ListDetachedDisks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListDetachedDisks'
type MockDiskClientInterface_ListDetachedDisks_Call struct {
	*mock.Call
}

// ListDetachedDisks is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID string
//   - location string
//   - labelFilter string
func (_e *MockDiskClientInterface_Expecter) ListDetachedDisks(ctx interface{}, projectID interface{}, location interface{}, labelFilter interface{}) *MockDiskClientInterface_ListDetachedDisks_Call {
	return &MockDiskClientInterface_ListDetachedDisks_Call{Call: _e.mock.On("ListDetachedDisks", ctx, projectID, location, labelFilter)}
}

func (_c *MockDiskClientInterface_ListDetachedDisks_Call) Run(run func(ctx context.Context, projectID string, location string, labelFilter string)) *MockDiskClientInterface_ListDetachedDisks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockDiskClientInterface_ListDetachedDisks_Call) Return(_a0 []*computepb.Disk, _a1 error) *MockDiskClientInterface_ListDetachedDisks_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDiskClientInterface_ListDetachedDisks_Call) RunAndReturn(run func(context.Context, string, string, string) ([]*computepb.Disk, error)) *MockDiskClientInterface_ListDetachedDisks_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateDiskLabel provides a mock function with given fields: ctx, projectID, zone, diskName, labelKey, labelValue
func (_m *MockDiskClientInterface) UpdateDiskLabel(ctx context.Context, projectID string, zone string, diskName string, labelKey string, labelValue string) error {
	ret := _m.Called(ctx, projectID, zone, diskName, labelKey, labelValue)

	if len(ret) == 0 {
		panic("no return value specified for UpdateDiskLabel")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string, string) error); ok {
		r0 = rf(ctx, projectID, zone, diskName, labelKey, labelValue)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDiskClientInterface_UpdateDiskLabel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateDiskLabel'
type MockDiskClientInterface_UpdateDiskLabel_Call struct {
	*mock.Call
}

// UpdateDiskLabel is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID string
//   - zone string
//   - diskName string
//   - labelKey string
//   - labelValue string
func (_e *MockDiskClientInterface_Expecter) UpdateDiskLabel(ctx interface{}, projectID interface{}, zone interface{}, diskName interface{}, labelKey interface{}, labelValue interface{}) *MockDiskClientInterface_UpdateDiskLabel_Call {
	return &MockDiskClientInterface_UpdateDiskLabel_Call{Call: _e.mock.On("UpdateDiskLabel", ctx, projectID, zone, diskName, labelKey, labelValue)}
}

func (_c *MockDiskClientInterface_UpdateDiskLabel_Call) Run(run func(ctx context.Context, projectID string, zone string, diskName string, labelKey string, labelValue string)) *MockDiskClientInterface_UpdateDiskLabel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(string), args[5].(string))
	})
	return _c
}

func (_c *MockDiskClientInterface_UpdateDiskLabel_Call) Return(_a0 error) *MockDiskClientInterface_UpdateDiskLabel_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDiskClientInterface_UpdateDiskLabel_Call) RunAndReturn(run func(context.Context, string, string, string, string, string) error) *MockDiskClientInterface_UpdateDiskLabel_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockDiskClientInterface creates a new instance of MockDiskClientInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDiskClientInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDiskClientInterface {
	mock := &MockDiskClientInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
