// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	computepb "cloud.google.com/go/compute/apiv1/computepb"
	migrator "github.com/maxkimambo/pd/internal/migrator"

	mock "github.com/stretchr/testify/mock"
)

// MockJobPrioritizer is an autogenerated mock type for the JobPrioritizer type
type MockJobPrioritizer struct {
	mock.Mock
}

type MockJobPrioritizer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockJobPrioritizer) EXPECT() *MockJobPrioritizer_Expecter {
	return &MockJobPrioritizer_Expecter{mock: &_m.Mock}
}

// AssignPriority provides a mock function with given fields: instance, disks
func (_m *MockJobPrioritizer) AssignPriority(instance *computepb.Instance, disks []*migrator.AttachedDiskInfo) migrator.JobPriority {
	ret := _m.Called(instance, disks)

	if len(ret) == 0 {
		panic("no return value specified for AssignPriority")
	}

	var r0 migrator.JobPriority
	if rf, ok := ret.Get(0).(func(*computepb.Instance, []*migrator.AttachedDiskInfo) migrator.JobPriority); ok {
		r0 = rf(instance, disks)
	} else {
		r0 = ret.Get(0).(migrator.JobPriority)
	}

	return r0
}

// MockJobPrioritizer_AssignPriority_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AssignPriority'
type MockJobPrioritizer_AssignPriority_Call struct {
	*mock.Call
}

// AssignPriority is a helper method to define mock.On call
//   - instance *computepb.Instance
//   - disks []*migrator.AttachedDiskInfo
func (_e *MockJobPrioritizer_Expecter) AssignPriority(instance interface{}, disks interface{}) *MockJobPrioritizer_AssignPriority_Call {
	return &MockJobPrioritizer_AssignPriority_Call{Call: _e.mock.On("AssignPriority", instance, disks)}
}

func (_c *MockJobPrioritizer_AssignPriority_Call) Run(run func(instance *computepb.Instance, disks []*migrator.AttachedDiskInfo)) *MockJobPrioritizer_AssignPriority_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*computepb.Instance), args[1].([]*migrator.AttachedDiskInfo))
	})
	return _c
}

func (_c *MockJobPrioritizer_AssignPriority_Call) Return(_a0 migrator.JobPriority) *MockJobPrioritizer_AssignPriority_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockJobPrioritizer_AssignPriority_Call) RunAndReturn(run func(*computepb.Instance, []*migrator.AttachedDiskInfo) migrator.JobPriority) *MockJobPrioritizer_AssignPriority_Call {
	_c.Call.Return(run)
	return _c
}

// Compare provides a mock function with given fields: job1, job2
func (_m *MockJobPrioritizer) Compare(job1 *migrator.MigrationJob, job2 *migrator.MigrationJob) int {
	ret := _m.Called(job1, job2)

	if len(ret) == 0 {
		panic("no return value specified for Compare")
	}

	var r0 int
	if rf, ok := ret.Get(0).(func(*migrator.MigrationJob, *migrator.MigrationJob) int); ok {
		r0 = rf(job1, job2)
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// MockJobPrioritizer_Compare_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Compare'
type MockJobPrioritizer_Compare_Call struct {
	*mock.Call
}

// Compare is a helper method to define mock.On call
//   - job1 *migrator.MigrationJob
//   - job2 *migrator.MigrationJob
func (_e *MockJobPrioritizer_Expecter) Compare(job1 interface{}, job2 interface{}) *MockJobPrioritizer_Compare_Call {
	return &MockJobPrioritizer_Compare_Call{Call: _e.mock.On("Compare", job1, job2)}
}

func (_c *MockJobPrioritizer_Compare_Call) Run(run func(job1 *migrator.MigrationJob, job2 *migrator.MigrationJob)) *MockJobPrioritizer_Compare_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*migrator.MigrationJob), args[1].(*migrator.MigrationJob))
	})
	return _c
}

func (_c *MockJobPrioritizer_Compare_Call) Return(_a0 int) *MockJobPrioritizer_Compare_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockJobPrioritizer_Compare_Call) RunAndReturn(run func(*migrator.MigrationJob, *migrator.MigrationJob) int) *MockJobPrioritizer_Compare_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockJobPrioritizer creates a new instance of MockJobPrioritizer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockJobPrioritizer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockJobPrioritizer {
	mock := &MockJobPrioritizer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
