// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	migrator "github.com/maxkimambo/pd/internal/migrator"
	mock "github.com/stretchr/testify/mock"
)

// MockWorker is an autogenerated mock type for the Worker type
type MockWorker struct {
	mock.Mock
}

type MockWorker_Expecter struct {
	mock *mock.Mock
}

func (_m *MockWorker) EXPECT() *MockWorker_Expecter {
	return &MockWorker_Expecter{mock: &_m.Mock}
}

// GetID provides a mock function with no fields
func (_m *MockWorker) GetID() int {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetID")
	}

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// MockWorker_GetID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetID'
type MockWorker_GetID_Call struct {
	*mock.Call
}

// GetID is a helper method to define mock.On call
func (_e *MockWorker_Expecter) GetID() *MockWorker_GetID_Call {
	return &MockWorker_GetID_Call{Call: _e.mock.On("GetID")}
}

func (_c *MockWorker_GetID_Call) Run(run func()) *MockWorker_GetID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockWorker_GetID_Call) Return(_a0 int) *MockWorker_GetID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockWorker_GetID_Call) RunAndReturn(run func() int) *MockWorker_GetID_Call {
	_c.Call.Return(run)
	return _c
}

// ProcessJob provides a mock function with given fields: job
func (_m *MockWorker) ProcessJob(job *migrator.MigrationJob) error {
	ret := _m.Called(job)

	if len(ret) == 0 {
		panic("no return value specified for ProcessJob")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*migrator.MigrationJob) error); ok {
		r0 = rf(job)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockWorker_ProcessJob_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProcessJob'
type MockWorker_ProcessJob_Call struct {
	*mock.Call
}

// ProcessJob is a helper method to define mock.On call
//   - job *migrator.MigrationJob
func (_e *MockWorker_Expecter) ProcessJob(job interface{}) *MockWorker_ProcessJob_Call {
	return &MockWorker_ProcessJob_Call{Call: _e.mock.On("ProcessJob", job)}
}

func (_c *MockWorker_ProcessJob_Call) Run(run func(job *migrator.MigrationJob)) *MockWorker_ProcessJob_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*migrator.MigrationJob))
	})
	return _c
}

func (_c *MockWorker_ProcessJob_Call) Return(_a0 error) *MockWorker_ProcessJob_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockWorker_ProcessJob_Call) RunAndReturn(run func(*migrator.MigrationJob) error) *MockWorker_ProcessJob_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockWorker creates a new instance of MockWorker. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockWorker(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockWorker {
	mock := &MockWorker{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
