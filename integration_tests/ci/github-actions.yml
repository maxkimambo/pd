name: Integration Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  GO_VERSION: '1.21'
  TERRAFORM_VERSION: '1.5.0'

jobs:
  integration-tests:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: ${{ env.TERRAFORM_VERSION }}

    - name: Set up Cloud SDK
      id: auth
      uses: google-github-actions/setup-gcloud@v1
      with:
        service_account_key: ${{ secrets.GCP_SA_KEY }}
        project_id: ${{ secrets.GCP_TEST_PROJECT_ID }}
        export_default_credentials: true

    - name: Install dependencies
      run: |
        go mod download
        go mod verify

    - name: Build binary
      run: make build

    - name: Run unit tests
      run: make test

    - name: Run integration tests
      env:
        GCP_PROJECT_ID: ${{ secrets.GCP_TEST_PROJECT_ID }}
        GOOGLE_APPLICATION_CREDENTIALS: ${{ steps.auth.outputs.credentials_file_path }}
      run: |
        make test-integration-parallel
      timeout-minutes: 60

    - name: Clean up test resources on failure
      if: failure()
      env:
        GCP_PROJECT_ID: ${{ secrets.GCP_TEST_PROJECT_ID }}
      run: |
        # Clean up any lingering test resources
        gcloud compute instances list --filter="labels.purpose=integration-test" --format="value(name,zone)" | \
        while read -r name zone; do
          echo "Deleting instance $name in zone $zone"
          gcloud compute instances delete "$name" --zone="$zone" --quiet || true
        done
        
        gcloud compute disks list --filter="labels.purpose=integration-test" --format="value(name,zone)" | \
        while read -r name zone; do
          echo "Deleting disk $name in zone $zone"
          gcloud compute disks delete "$name" --zone="$zone" --quiet || true
        done